type Query {
  # Get information like username, friendlist, ... of a specific user
  user(username: String): User

  # Get information about a group chat
  group(groupId: String!): GroupChat

  # Get a list of group
  groupsList(groupName: String!): [GroupChat]!

  # firstUserId is the user id of currently logged in user who makes request
  # secondUserId is the id of user to whom the logged in user is chatting
  userMessages(
    firstUser: String!
    secondUser: String!
    nextCursor: Date
    limit: Int
  ): MessagesList

  # Because different users can create group with the same name, so get message by Group ID
  groupMessages(
    groupId: String!
    nextCursor: Date
    limit: Int
  ): GroupMessageList
}

type Mutation {
  addUser(
    username: String!
    email: String!
    name: String!
    phone_number: String!
    birthdate: BirthDate!
  ): User!

  createGroup(groupName: String!, username: String!): GroupChat

  addUserToGroup(groupId: String!, username: String!): GroupChat

  removeUserFromGroup(groupId: String!, username: String!): GroupChat

  changeMessageInfo(
    messageId: String!
    deletedBySender: Boolean
    deletedByReceiver: Boolean
  ): Message!

  deleteMessage(messageId: String!): Message

  deleteGroupMessage(messageId: String!): GroupMessage

  updateUserInfo(
    email: String
    name: String
    phone_number: String
    accountStatus: AccountStatus
    lastOnlineTime: Date
    birthdate: BirthDate
  ): User!
  # addUserToFriendList(username: String!): [String!]!

  addUserToContactList(username: String!): User!

  removeUserFromContactList(username: String!): User!
}

type Subscription {
  # To avoid confusion: loggedInUsername is the username of client who subscribe to account status of his/her contactlist
  accountStatusInfo(loggedInUsername: String!): AccountStatusInfo!

  # Subscribe to group members account status when on/offline
  groupMembersAccountStatus(groupId: String!): AccountStatusInfo!

  groupMessageDeleted(groupId: String!): Message!

  memberLeavesGroup(groupId: String!): User!
}

type AccountStatusInfo {
  username: String!
  accountStatus: AccountStatus!
  lastOnlineTime: AccountStatus
}

enum AccountStatus {
  Online
  Offline
}

type ExampleType {
  newField: String
  oldField: String @deprecated(reason: "Use 'newField'.")
}

type MessagesList {
  messages: [Message]!
  count: Int! # number of message to get in 1 query
  nextCursor: Date! # id of last message in this query
}

type GroupMessageList {
  messages: [GroupMessage]!
  count: Int! # number of message to get in 1 query
  nextCursor: Date! # id of last message in this query
}

enum OperationStatus {
  SUCCESS
  FAILED
}

scalar Date

scalar BirthDate

type User {
  # The following fields are saved in AWS Cognito
  username: String!
  email: String!
  name: String!
  phone_number: String!
  birthdate: BirthDate!

  # The following fields are saved in MongoDB
  _id: String!
  friendlist: [User!]
  groups: [GroupChat!]!
  contactlist: [User!]
  avatar: String! # S3 Image Url
  accountStatus: AccountStatus
  lastOnlineTime: Date
}

type Message {
  _id: ID!
  sender: User!
  receiver: User!
  content: String!
  files: [File]!
  markedDeletedBySender: Boolean
  markedDeletedByReceiver: Boolean
  sentTime: Date!
  seenStatus: Boolean
}

type GroupMessage {
  _id: ID!
  sender: User!
  content: String!
  files: [File]!
  group: GroupChat!
  sentTime: Date!
}

type File {
  fileName: String!
  fileType: String!
  fileUrl: String!
}

type GroupChat {
  _id: String!
  groupName: String!
  admin: User!
  members: [User!]!
  groupAvatar: String!
}

type FriendRequest {
  sender: User!
  receiver: User!
  acceptStatus: Boolean!
  # sentTime: Date!
}