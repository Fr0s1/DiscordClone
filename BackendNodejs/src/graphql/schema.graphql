type Query {
  # Get information like username, friendlist, ... of a specific user
  user(username: String): User

  # Get information about a group chat
  group(admin: String!, groupName: String!): GroupChat

  # Get a list of group
  groupsList(groupName: String!): [GroupChat]!

  # firstUserId is the user id of currently logged in user who makes request
  # secondUserId is the id of user to whom the logged in user is chatting
  userMessages(
    firstUser: String!
    secondUser: String!
    nextCursor: Date
    limit: Int
  ): MessagesList

  # Because different users can create group with the same name, so get message by Group ID
  groupMessages(
    groupId: String!
    nextCursor: Date
    limit: Int
  ): GroupMessageList

  test: String
}

type Mutation {
  addUser(
    username: String!
    email: String!
    name: String!
    phone_number: String!
  ): User!

  createGroup(groupName: String!, username: String!): GroupChat

  addUserToGroup(
    admin: String!
    groupName: String!
    username: String!
  ): GroupChat

  removeUserFromGroup(
    admin: String!
    groupName: String!
    username: String!
  ): GroupChat

  deleteMessage(messageId: String!): Message

  deleteGroupMessage(messageId: String!): GroupMessage

  updateUserInfo(email: String, name: String, phone_number: String): User!
  # addUserToFriendList(username: String!): [String!]!

  # addToContactList(username: String!):
}

type ExampleType {
  newField: String
  oldField: String @deprecated(reason: "Use 'newField'.")
}

enum Role {
  Owner
  Friend
  Public
}

type MessagesList {
  messages: [Message]!
  count: Int! # number of message to get in 1 query
  nextCursor: Date! # id of last message in this query
}

type GroupMessageList {
  messages: [GroupMessage]!
  count: Int! # number of message to get in 1 query
  nextCursor: Date! # id of last message in this query
}

enum OperationStatus {
  SUCCESS
  FAILED
}

scalar Date

type User {
  # The following fields are saved in AWS Cognito
  username: String!
  email: String!
  name: String!
  phone_number: String!

  # The following fields are saved in MongoDB
  _id: String!
  friendlist: [User!]
  groups: [GroupChat!]!
  contactlist: [User!]
  avatar: String # S3 Image Url
}

type Message {
  _id: ID!
  sender: User!
  receiver: User!
  content: String!
  files: [File]!
  markedDeletedBySender: Boolean
  markedDeletedByReceiver: Boolean
  sentTime: Date!
}

type GroupMessage {
  _id: ID!
  sender: User!
  content: String!
  files: [File]!
  group: GroupChat!
  sentTime: Date!
}

type File {
  fileName: String!
  fileType: String!
  fileUrl: String!
}

type GroupChat {
  _id: String!
  groupName: String!
  admin: User!
  members: [User!]!
  # messages: [Message!]!
  groupAvatar: String!
  # createdAt: Date!
}

type FriendRequest {
  sender: User!
  receiver: User!
  acceptStatus: Boolean!
  # sentTime: Date!
}
