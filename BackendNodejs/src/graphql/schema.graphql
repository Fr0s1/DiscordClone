type Query {
  user(username: String): User
  group(admin: String!, groupName: String!): GroupChat
  groupsList(groupName: String!): [GroupChat]!

  # firstUserId is the user id of currently logged in user who make request
  # secondUserId is the user id who the logged in user is chatting
  userMessages(firstUser: String!, secondUser: String!): [Message!]
}

type Mutation {
  addUser(
    username: String!
    email: String!
    name: String!
    phone_number: String!
  ): User!

  createGroup(groupName: String!, username: String!): GroupChat

  addUserToGroup(
    admin: String!
    groupName: String!
    username: String!
  ): GroupChat

  removeUserFromGroup(
    admin: String!
    groupName: String!
    username: String!
  ): GroupChat

  deleteMessage(username: String!, messageId: String!): Message
}

enum OperationStatus {
  SUCCESS
  FAILED
}

scalar Date

type User {
  # The following fields are saved in AWS Cognito
  username: String!
  #   birthdate: Date!
  email: String!
  name: String!
  phone_number: String!

  # The following fields are saved in MongoDB
  _id: String!
  friendlist: [User!]
  groups: [GroupChat!]!
  contactlist: [User!]
  avatar: String # S3 Image Url
  #   messages: [Message!]!
}

type Message {
  _id: ID!
  sender: User!
  receiver: User
  content: String!
  files: [File]!
  markedDeletedBySender: Boolean
  markedDeletedByReceiver: Boolean
  sentTime: String!
}

type File {
  fileName: String!
  fileType: String!
  fileUrl: String!
}

type GroupChat {
  groupName: String!
  admin: User!
  members: [User!]!
  # messages: [Message!]!
  groupAvatar: String!
  # createdAt: Date!
}

type FriendRequest {
  sender: User!
  receiver: User!
  acceptStatus: Boolean!
  # sentTime: Date!
}
